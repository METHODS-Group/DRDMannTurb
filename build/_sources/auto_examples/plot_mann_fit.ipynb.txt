{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "\n# Pure Mann Model Fit\n\nThis example demonstrates the a simple configuration of ``DRDMannTurb`` to spectra fitting while using the Mann model as the eddy lifetime function under the Kaimal one-point spectra.\n\nFor reference, the full Mann eddy lifetime function is given by \n\n\\begin{align}\\tau^{\\mathrm{IEC}}(k)=\\frac{(k L)^{-\\frac{2}{3}}}{\\sqrt{{ }_2 F_1\\left(1 / 3,17 / 6 ; 4 / 3 ;-(k L)^{-2}\\right)}}\\end{align}\n\nand the Kaimal one-point spectra. This set of models has classically been most useful for flat homogeneous terrains. \n\nAlso, the resulting fitting can be used directly to generate a 3D Mann fluctuation field, as demonstrated in our wind generation example. \n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Import packages\n\nFirst, we import the packages we need for this example.\n\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": false
      },
      "outputs": [],
      "source": [
        "import torch\n\nfrom drdmannturb import EddyLifetimeType\nfrom drdmannturb.parameters import (\n    LossParameters,\n    NNParameters,\n    PhysicalParameters,\n    ProblemParameters,\n)\nfrom drdmannturb.spectra_fitting import CalibrationProblem, OnePointSpectraDataGenerator\n\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\n\n# v2: torch.set_default_device('cuda:0')\nif torch.cuda.is_available():\n    torch.set_default_tensor_type(\"torch.cuda.FloatTensor\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Set up physical parameters and domain associated with the Kaimal spectrum. We perform the spectra fitting over the $k_1$ space :math:[10^{{-1}}, 10^2]`\nwith 20 points.\n\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": false
      },
      "outputs": [],
      "source": [
        "# Scales associated with Kaimal spectrum\nL = 0.59  # length scale\nGamma = 3.9  # time scale\nsigma = 3.2  # energy spectrum scale\n\ndomain = torch.logspace(-1, 2, 20)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## ``CalibrationProblem`` Construction\nThe following cell defines the ``CalibrationProblem`` using default values\nfor the ``NNParameters`` and ``LossParameters`` dataclasses. Importantly,\nthese data classes are not necessary, see their respective documentations for the default values.\nThe current set-up involves using the Mann model for the eddy lifetime function, meaning no\nneural network is used in learning the $\\tau$ function. Additionally, the physical parameters\nare taken from the reference values for the Kaimal spectra. Finally, in this scenario the regression\noccurs as an MSE fit to the spectra, which are generated from Mann turbulence (i.e. a synthetic data fit).\nThe ``EddyLifetimeType.MANN`` argument determines the type of eddy lifetime function to use.\n\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": false
      },
      "outputs": [],
      "source": [
        "pb = CalibrationProblem(\n    nn_params=NNParameters(),\n    prob_params=ProblemParameters(eddy_lifetime=EddyLifetimeType.MANN, nepochs=2),\n    loss_params=LossParameters(),\n    phys_params=PhysicalParameters(L=L, Gamma=Gamma, sigma=sigma, domain=domain),\n    device=device,\n)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Data Generation\nThe following cell generates the dataset required for calibration.\n\nThe first two lines are required to construct the spatial grid of points.\nSpecifically, ``DataPoints`` is a list of tuples of the observed spectra data\npoints at each of the $k_1$\ncoordinates and the reference height (in our case, this is just $1$).\n\nLastly, we collect ``Data = (<data points>, <data values>)`` to be used in calibration.\n\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": false
      },
      "outputs": [],
      "source": [
        "k1_data_pts = domain\nDataPoints = [(k1, 1) for k1 in k1_data_pts]\n\nData = OnePointSpectraDataGenerator(data_points=DataPoints).Data"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "The model is now \"calibrated\" to the provided spectra from the synthetic\ndata generated from ``OnePointSpectraDataGenerator``.\n\nThe Mann eddy lifetime function relies on evaluating a hypergeometric function,\nwhich only has a CPU implementation through ``Scipy``. When using this function\nwith a neural network task, consider either learning this function as well or\nusing a linear approximation from your data that provides a GPU kernel for\nfast evaluation of a similar model. See a later example.\n\nHaving the necessary components, the model is \"calibrated\" (fit) to the provided spectra\nand we conclude with a plot.\n\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": false
      },
      "outputs": [],
      "source": [
        "optimal_parameters = pb.calibrate(data=Data)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "The following plot shows the best fit to the synthetic Mann data. Notice that\nthe eddy lifetime function is precisely the Mann model.\n\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": false
      },
      "outputs": [],
      "source": [
        "pb.plot()"
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.9.13"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}