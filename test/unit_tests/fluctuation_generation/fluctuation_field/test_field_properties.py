"""Test properties of fluctuation field generated by DRD model."""

from math import isclose

import numpy as np
import pytest
import torch

from drdmannturb.fluctuation_generation import FluctuationFieldGenerator, VonKarmanCovariance

device = "cuda" if torch.cuda.is_available() else "cpu"

if torch.cuda.is_available():
    torch.set_default_tensor_type("torch.cuda.FloatTensor")


@pytest.mark.skipif(not torch.cuda.is_available(), reason="No CUDA device available")
@pytest.mark.slow
def test_field_divergence_von_karman():
    """Evaluate average divergence of generated VK field; should be small or zero."""
    z0 = 0.02
    zref = 90.0
    uref = 11.4
    windprofiletype = "LOG"

    Lx, Ly, Lz = 720.0, 64.0, 64.0
    grid_dimensions = np.array([Lx, Ly, Lz])
    grid_levels = np.array([6, 4, 4])

    # VK parameters chosen to be reasonable
    L = 0.593 * zref
    E0 = 0.052

    cov = VonKarmanCovariance(length_scale=L, E0=E0)

    gen = FluctuationFieldGenerator(
        grid_dimensions=grid_dimensions,
        grid_levels=grid_levels,
        covariance=cov,
        seed=42,
    )

    fluctuation_field = gen.generate(
        num_blocks=3,
        zref=zref,
        uref=uref,
        z0=z0,
        windprofiletype=windprofiletype,
    )

    spacing = tuple(grid_dimensions / (2.0**grid_levels + 1))
    avg_div = gen.evaluate_divergence(spacing, fluctuation_field).mean()

    assert isclose(abs(avg_div), 1e-6, abs_tol=1e-4)
