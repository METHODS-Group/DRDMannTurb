"""Test properties of fluctuation field generated by DRD model."""

from math import isclose
from pathlib import Path

import numpy as np
import pytest
import torch

from drdmannturb import FluctuationFieldGenerator

device = "cuda" if torch.cuda.is_available() else "cpu"

# v2: torch.set_default_device('cuda:0')
if torch.cuda.is_available():
    torch.set_default_tensor_type("torch.cuda.FloatTensor")


L = 0.59

Gamma = 3.9
sigma = 3.4

domain = torch.logspace(-1, 2, 20)

path_to_trained = Path(__file__).parent.parent.parent / "docs/source/results"


# TODO: this requires the GPU for testing, but passes as of release 0.1.0
@pytest.mark.skipif(not torch.cuda.is_available(), reason="No CUDA device available")
@pytest.mark.slow
@pytest.mark.parametrize(
    "model_save_filename",
    [
        "EddyLifetimeType.TAUNET_DataType.KAIMAL.pkl",
        "EddyLifetimeType.CUSTOMMLP_DataType.KAIMAL.pkl",
    ],
)
def test_field_divergence(model_save_filename: str):
    """Evaluates divergence of generated fluctuation field from pre-trained DRD model. These are expected to be
    nearly 0. Both the maximum point-wise divergence and the average are compared against the tolerances of 1e-2
    and 1e-5,respectively, within one order of magnitude difference (these are random quantities since network
    output may differ).

    Parameters
    ----------
    model_save_filename : str
        Filename of the pre-trained model.
    """
    z0 = 0.02
    zref = 90
    uref = 11.4
    ustar = uref * 0.41 / np.log(zref / z0)
    windprofiletype = "LOG"

    Lx = 720
    Ly = 64
    Lz = 64

    nBlocks = 3
    grid_dimensions = np.array([Lx / 4, Ly, Lz])
    grid_levels = np.array([6, 4, 4])

    L = 0.593 * zref  # length scale
    Gamma = 3.89  # time scale
    sigma = 0.052  # magnitude (σ = αϵ^{2/3})

    # grid_dimensions = np.array([1200.0, 864.0, 576.0])
    # grid_levels = np.array([5, 3, 5])

    seed = None

    path_to_parameters = path_to_trained / model_save_filename

    Type_Model = "DRD"
    nBlocks = 3

    gen_drd = FluctuationFieldGenerator(
        ustar,
        zref,
        grid_dimensions,
        grid_levels,
        length_scale=L,
        time_scale=Gamma,
        energy_spectrum_scale=sigma,
        model=Type_Model,
        path_to_parameters=path_to_parameters,
        seed=seed,
    )

    fluctuation_field_drd = gen_drd.generate(nBlocks, zref, uref, z0, windprofiletype)

    spacing = tuple(grid_dimensions / (2.0**grid_levels + 1))

    avg_div = gen_drd.evaluate_divergence(spacing, fluctuation_field_drd).mean()

    assert isclose(abs(avg_div), 1e-4, abs_tol=1e-3)
