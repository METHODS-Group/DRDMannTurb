"""Test properties of fluctuation field generated by DRD model."""

from math import isclose
from pathlib import Path

import numpy as np
import pytest
import torch

from drdmannturb import GenerateTurbulenceField

device = "cuda" if torch.cuda.is_available() else "cpu"

# v2: torch.set_default_device('cuda:0')
if torch.cuda.is_available():
    torch.set_default_tensor_type("torch.cuda.FloatTensor")


L = 0.59

Gamma = 3.9
sigma = 3.4

domain = torch.logspace(-1, 2, 20)

dir_path = Path(__file__).resolve().parent
path_to_trained = dir_path.parent / "in"


@pytest.mark.parametrize(
    "model_save_filename",
    [
        "EddyLifetimeType.TAUNET_DataType.KAIMAL.pkl",
        "EddyLifetimeType.CUSTOMMLP_DataType.KAIMAL.pkl",
    ],
)
def test_field_divergence(model_save_filename: str):
    """Evaluates divergence of generated fluctuation field from pre-trained DRD model. These are expected to be nearly 0. Both the maximum point-wise divergence and the average are compared against the tolerances of 1e-2 and 1e-5,respectively, within one order of magnitude difference (these are random quantities since network output may differ).

    Parameters
    ----------
    model_save_filename : str
        Filename of the pre-trained model.
    """
    friction_velocity = 0.45
    reference_height = 180.0
    roughness_height = 0.0001

    grid_dimensions = np.array([1200.0, 864.0, 576.0])
    grid_levels = np.array([5, 3, 5])

    seed = None

    path_to_parameters = path_to_trained / model_save_filename

    Type_Model = "NN"
    nBlocks = 3

    gen_drd = GenerateTurbulenceField(
        friction_velocity,
        reference_height,
        grid_dimensions,
        grid_levels,
        model=Type_Model,
        path_to_parameters=path_to_parameters,
        seed=seed,
    )

    fluctuation_field_drd = gen_drd.generate(nBlocks)

    fluctuation_field_drd = gen_drd.normalize(roughness_height, friction_velocity)

    spacing = tuple(grid_dimensions / (2.0**grid_levels + 1))

    max_div = gen_drd.evaluate_divergence(spacing, fluctuation_field_drd).max()
    avg_div = gen_drd.evaluate_divergence(spacing, fluctuation_field_drd).mean()

    assert isclose(abs(max_div), 1e-2, abs_tol=1e-1)
    assert isclose(abs(avg_div), 1e-5, abs_tol=1e-4)


if __name__ == "__main__":
    test_field_divergence("EddyLifetimeType.CUSTOMMLP_DataType.KAIMAL.pkl")
